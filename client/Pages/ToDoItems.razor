@using System.Text.Json;

<div class="container fs-5">
    @if (todoItems != null)
    {
        @foreach (var item in todoItems)
        {
            <div class="row col-sm-11 justify-content-center">
                <div class="col-sm-6 border p-3 rounded">
                    <div class="row mb-2">
                        <div class="col-6 font-weight-bold">Time:</div>
                        <div class="col-6">@item.date.ToLocalTime().ToString("h:mm tt")</div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-6 font-weight-bold">Category:</div>
                        <div class="col-6">@item.category</div>
                    </div>
                    <div class="row">
                        <div class="col-6 font-weight-bold">Description:</div>
                        <div class="col-6">@item.description</div>
                    </div>
                </div>
                <div class="col-sm-1 d-flex flex-column justify-content-center align-items-center">
                    <div>
                        <button class="btn btn-danger" @onclick="()=>DeleteAsync(item.id, sharedClient)">Delete</button>
                    </div>
                    <div>
                        @* <button class="btn btn-primary mt-1" @onclick="()=>EditItem(item.id)">Edit</button> *@
                    </div>
                </div>
            </div>
            <div class="col-sm-1">

            </div>
        }
    }
    else
    {
        <p>Loading...</p>
    }
</div>

@code {
    [Parameter]
    public DateTime SelectedDate { get; set; }
    public class TodoItem
    {
        public string? id { get; set; }
        public DateTime date { get; set; }
        public string? category { get; set; }
        public bool remindEnabled { get; set; }
        public string? description { get; set; }
    }
    private List<TodoItem>? todoItems;
    protected override async Task OnParametersSetAsync()
    {
        await GetAsync(sharedClient);
    }
    private static HttpClient sharedClient = new()
        {
            BaseAddress = new Uri("http://localhost:5172"),
        };

    async Task GetAsync(HttpClient httpClient)
    {
        // Format the selected date as yyyy-MM-dd to match the format in the database
        string formattedDate = SelectedDate.ToString("yyyy-MM-dd");

        // Construct the query string with the date filter
        string queryString = $"date={formattedDate}";

        using HttpResponseMessage response = await httpClient.GetAsync($"todoitems/{formattedDate}");

        var jsonResponse = await response.Content.ReadAsStringAsync();
        todoItems = JsonSerializer.Deserialize<List<TodoItem>>(jsonResponse);
    }

    async Task DeleteAsync(string itemId, HttpClient httpClient)
    {
        try
        {
            string uri = $"todoitems/{itemId}";
            HttpResponseMessage response = await sharedClient.DeleteAsync(uri);
            if (response.IsSuccessStatusCode)
            {
                todoItems?.RemoveAll(item => item.id == itemId);
            }
            else
            {
                Console.WriteLine($"Failed to delete item. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while deleting item: {ex.Message}");
        }
    }
}