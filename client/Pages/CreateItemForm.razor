@page "/CreateItemForm"
@inject NavigationManager NavigationManager
@using System.Text.Json;
@using System.Text;

<div class="container">
    <EditForm Model="@newItemModel" OnValidSubmit="Submit">
        <div>New Activity</div>
        <div class="form-group mb-3">
            <InputDate class="form-control" @bind-Value="newItemModel.Date" />
        </div>
        <div class="form-group mb-3">
            <InputDate class="form-control" Type="InputDateType.Time" @bind-Value="@newItemModel.Time" />
        </div>
        <div class="input-group mb-3">
            <span class="input-group-text">Category</span>
            <InputSelect class="form-select" @bind-Value="newItemModel.Category">
                <option value="">Please select a Category</option>
                <option value="Shopping">Shopping</option>
                <option value="Work">Work</option>
                <option value="Hobby">Hobby</option>
                <option value="Chores">Chores</option>
                <option value="Others">Others</option>
            </InputSelect>
        </div>
        <div class="form-check form-switch mb-3">
            <label class="form-check-label" for="flexSwitchCheckDefault">Remind</label>
            <InputCheckbox class="form-check-input" @bind-Value="newItemModel.RemindEnabled" role="switch"
                id="flexSwitchCheckDefault" />
        </div>
        <div>
            <InputText type="text" @bind-Value="newItemModel.Description" class="form-control mb-3"
                placeholder="Brief Description" />
        </div>
        <div class="mb-3 d-flex justify-content-between">
            <button type="submit" class="btn btn-success mb-3">Submit</button>
            <button type="button" @onclick="NavigateToHome" class="btn btn-danger">Cancel</button>
        </div>
    </EditForm>
</div>

@code {
    private NewItemModel newItemModel = new NewItemModel()
        {
            Date = DateOnly.FromDateTime(DateTime.Today),
            Time = TimeOnly.FromTimeSpan(DateTime.Now.TimeOfDay)
        };

    public class NewItemModel
    {
        public DateOnly Date { get; set; }
        public TimeOnly Time { get; set; }
        public string? Category { get; set; }
        public bool RemindEnabled { get; set; }
        public string? Description { get; set; }
    }
    private async Task Submit()
    {
        DateTime combinedDate = new DateTime(
        newItemModel.Date.Year, newItemModel.Date.Month, newItemModel.Date.Day,
        newItemModel.Time.Hour, newItemModel.Time.Minute, newItemModel.Time.Second);
        Console.WriteLine($"Date = {combinedDate}, " +
        $"Category = {newItemModel.Category}, " +
        $"RemindEnabled = {newItemModel.RemindEnabled}, " +
        $"Description = {newItemModel.Description}");
        await PostAsync(newItemModel, sharedClient);
        NavigationManager.NavigateTo("/");
    }

    private static HttpClient sharedClient = new()
        {
            BaseAddress = new Uri("http://localhost:5172"),
        };

    static async Task PostAsync(NewItemModel newItemModel, HttpClient httpClient)
    {
        DateTime combinedDate = new DateTime(
        newItemModel.Date.Year, newItemModel.Date.Month, newItemModel.Date.Day,
        newItemModel.Time.Hour, newItemModel.Time.Minute, newItemModel.Time.Second);

        using StringContent jsonContent = new(
        JsonSerializer.Serialize(new
        {
            date = combinedDate,
            category = newItemModel.Category,
            remindEnabled = newItemModel.RemindEnabled,
            description = newItemModel.Description,
        }),
        Encoding.UTF8,
        "application/json");

        using HttpResponseMessage response = await httpClient.PostAsync(
        "todoitems",
        jsonContent);

        var jsonResponse = await response.Content.ReadAsStringAsync();
        Console.WriteLine($"{jsonResponse}\n");
    }
    private void NavigateToHome(){
        NavigationManager.NavigateTo("/");
    }
}